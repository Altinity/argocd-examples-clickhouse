# Default values for sink-connector-lightweight.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: registry.gitlab.com/altinity-public/container-images/clickhouse_debezium_embedded
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "2023-11-03"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

persistentvolume:
  hostPath: "/mnt/data"

### Debezium storage mount path
debezium:
  pod:
    mountPath: "/usr/share/debezium/storage"

env:
  - name: database.hostname
    value: "mysql"
  - name: database.port
    value: "3306"
  - name: database.user
    value: "root"
  - name: database.password
    value: "password"
  - name: database.server.name
    value: "ER54"
  - name: database.include.list
    value: "test"
  - name: clickhouse.server.url
    value: "clickhouse"
  - name: clickhouse.server.port
    value: "8123"
  - name: clickhouse.server.user
    value: "root"
  - name: clickhouse.server.password
    value: "secretsecret"
  - name: clickhouse.server.database
    value: "public"
  - name: database.allowPublicKeyRetrieval
    value: "true"
  - name: snapshot.mode
    value: "initial"
  - name: offset.flush.interval.ms
    value: "60000"
  - name: connector.class
    value: "io.debezium.connector.mysql.MySqlConnector"
  - name: offset.storage
    value: "io.debezium.storage.jdbc.offset.JdbcOffsetBackingStore"
  - name: offset.storage.offset.storage.jdbc.offset.table.name
    value: "altinity_sink_connector.replica_source_info"
  - name: offset.storage.jdbc.url
    value: "jdbc:clickhouse://clickhouse:8123/altinity_sink_connector"
  - name: offset.storage.jdbc.user
    value: "root"
  - name: offset.storage.jdbc.password
    value: "secretsecret"
  - name: offset.storage.offset.storage.jdbc.offset.table.ddl
    value: "CREATE TABLE if not exists %s
    (
      `id` String,
      `offset_key` String,
      `offset_val` String,
      `record_insert_ts` DateTime,
      `record_insert_seq` UInt64,
      `_version` UInt64 MATERIALIZED toUnixTimestamp64Nano(now64(9))
    )
    ENGINE = ReplacingMergeTree(_version)
    ORDER BY id
    SETTINGS index_granularity = 8198"
  - name: offset.storage.offset.storage.jdbc.offset.table.delete
    value: "delete from %s where 1=1"
  - name: schema.history.internal
    value: "io.debezium.storage.jdbc.history.JdbcSchemaHistory"
  - name: schema.history.internal.jdbc.url
    value: "jdbc:clickhouse://clickhouse:8123/altinity_sink_connector"
  - name: schema.history.internal.jdbc.user
    value: "root"
  - name: schema.history.internal.jdbc.password
    value: "secretsecret"
  - name: schema.history.internal.jdbc.schema.history.table.ddl
    value: "CREATE TABLE if not exists %s
    (`id` VARCHAR(36) NOT NULL, `history_data` VARCHAR(65000), `history_data_seq` INTEGER, `record_insert_ts` TIMESTAMP NOT NULL, `record_insert_seq` INTEGER NOT NULL) ENGINE=ReplacingMergeTree(record_insert_seq) order by id"
  - name: schema.history.internal.jdbc.schema.history.table.name
    value: "altinity_sink_connector.replicate_schema_history"
  - name: enable.snapshot.ddl
    value: "true"
